
authenticate 함수가 실질적인 인증을 해주는 함수.

스프링 시큐리티 자체가 결국 여러가지 필터로 (필터체인) 구성되어져있음
그리고 개발자가 원하는데로 커스텀을 가능하다. ( 필터를 추가한다던지 )

세션이란 -> 서버에서 클라이언트 접속 정보를 관리하는 고유 아이디

스프링 자체는 서블릿 컨테이너에서 동작함 ( 서블릿들을 관리해주는게 서블릿 컨테이너니까 . . )

브라우저에서 개발자모드를 킨 후 저장소에 있는 쿠키영역을 보면 JSESSIONID(세션) 가 담겨져 있는 것을 확인 가능하다.
-> SessionID 를 탈취당하면 보안이 뚫릴 위험이 생긴다 . . . ( JWT 토큰도 마찬가지잖아 ) 세션 하이재킹 공격이라고한다.
-> 세션을 가지고 로그인 유무를 판단하기 때문임

-> JSESSIONID 는 톰캣이 발급해준다는 것을 기억하자 즉, 프런트엔드에서 만든 페이지는 세션아이디를 따로 받을 수 없다.
-> 백엔드에서 따로 프런트엔드에게 세션아이디를 리턴 해줘야한다. ( 시큐리티가 알아서 해주긴함 )
-> 프런트 개발자는 세션을 어떻게 관리할지에 대해서는 생각을 많이 해야한다.

( 기본적으로 시큐리티는 동시 로그인이 되는데 설정해서 동시 로그인 차단 가능함 )

@AuthenticaitonPrincipal 를 이용해서 로그인된 유저 정보를 가져올 수 있게끔 시큐리티가 제공해준다. ( 시큐리티 세션영역에 유저 정보가 저장되어있음 )
HttpSession 을 이용해서 JSESSIONID 도 가져올 수 있다.